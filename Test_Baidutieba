# -*- coding:utf-8 -*-
import urllib
import urllib2
import re
from bs4 import BeautifulSoup
##import sys
###reload(sys)
##sys.setdefaultencoding('utf-8') #encoding to prevent the utf-8 error
#3138733512 NBA summary information

#处理页面标签类
class Tool:
    #去除img标签,7位长空格
    removeImg = re.compile('<img.*?>| {7}|')
    #删除超链接标签
    removeAddr = re.compile('<a.*?>|</a>')
    #把换行的标签换为\n
    replaceLine = re.compile('<tr>|<div>|</div>|</p>')
    #将表格制表<td>替换为\t
    replaceTD= re.compile('<td>')
    #把段落开头换为\n加空两格
    replacePara = re.compile('<p.*?>')
    #将换行符或双换行符替换为\n
    replaceBR = re.compile('<br><br>|<br>')
    #将其余标签剔除
    removeExtraTag = re.compile('<.*?>')
    def replace(self,x):
        x = re.sub(self.removeImg,"",x)
        x = re.sub(self.removeAddr,"",x)
        x = re.sub(self.replaceLine,"\n",x)
        x = re.sub(self.replaceTD,"\t",x)
        x = re.sub(self.replacePara,"\n    ",x)
        x = re.sub(self.replaceBR,"\n",x)
        x = re.sub(self.removeExtraTag,"",x)
        #strip()将前后多余内容删除
        return x.strip()

#百度贴吧
class BDTB:
    def __init__(self,baseurl,seelz,floorTag):
        #只看楼主参数
        self.baseURL=baseurl
        self.seeLZ='?see_lz='+str(seelz)
        self.tool=Tool()
        #全局file变量，文件写入操作对象
        self.file = None
        #楼层标号，初始为1
        self.floor = 1
        #默认的标题，如果没有成功获取到标题的话则会用这个标题
        self.defaultTitle = u"百度贴吧"
        #是否写入楼分隔符的标记
        self.floorTag = floorTag
    def getPage(self,pageNum): #check the page of the post
        try:
            url=self.baseURL+self.seeLZ+'&pn='+str(pageNum)
            request=urllib2.Request(url)
            response=urllib2.urlopen(request)
            #print response.read().decode('utf-8')
            #self.result=response.read().decode('utf-8')
            return response.read().decode('utf-8') #in case of the file format
        except urllib2.URLError,e:
            if hasattr(e,'reason'):
                print u"贴吧失败",e.reason
                return None
    def getTitle(self,page): #get the title of the post
        #page=self.getpage(1)
        pattern=re.compile('<meta name="description" content=.*?"(.*?)" (.*?)>',re.S)
        #pattern = re.compile('<h1 class="core_title_txt.*?>(.*?)</h1>',re.S)
        result=re.search(pattern,page)
        if result:
            #print result.group(1).strip() #test the output
            return result.group(1).strip()
        else:
            return None
    def getPageNum(self,page):
        #page=self.getpage(1)
        pattern = re.compile('<li class="l_reply_num.*?</span>.*?<span.*?>(.*?)</span>',re.S) #get the page_number,use the group
        result=re.search(pattern,page)
        if result:
            #print result.group(1).strip()
            return  result.group(1).strip()
        else:
            return None
    def getContent(self,page):
        #page=self.getpage(1)
        pattern=re.compile('<div id="post_content_.*?>(.*?)</div>',re.S)
        items = re.findall(pattern,page)
        #floor=1
        contents=[]
        for item in items: #only handle the content
            #将文本进行去除标签处理，同时在前后加入换行符
            content = "\n"+self.tool.replace(item)+"\n"
            contents.append(content.encode('utf-8'))
        return contents
    def setFileTitle(self,title):
        #如果标题不是为None，即成功获取到标题
        if title is not None:
            self.file = open(title[0:9] + ".txt","w+")
        else:
            self.file = open(self.defaultTitle + ".txt","w+")
    def writeData(self,contents): #write the data
        #向文件写入每一楼的信息
        for item in contents:
            if self.floorTag == '1':
                #楼之间的分隔符
                floorLine = "\n" + str(self.floor) + u"-----------------------------------------------------------------------------------------\n"
                self.file.write(floorLine)
            self.file.write(item)
            self.floor += 1
    def start(self):
        indexPage = self.getPage(1)
        pageNum = self.getPageNum(indexPage)
        title = self.getTitle(indexPage)
        self.setFileTitle(title)
        if pageNum == None:
            print "URL已失效，请重试"
            return
        try:
            print u"该帖子共有" + str(pageNum) + u"页"
            for i in range(1,int(pageNum)+1): #search all the posts
                print u"正在写入第" + str(i) + u"页数据"
                page = self.getPage(i)
                contents = self.getContent(page)
                self.writeData(contents)
        #出现写入异常
        except IOError,e:
            print u"写入异常，原因" + e.message
        finally:
            print u"写入任务完成"
def main():
     #filename='tieba.txt'
    print u'input the post number'
    baseURL = 'http://tieba.baidu.com/p/' + str(raw_input(u'http://tieba.baidu.com/p/'))
    seeLZ = raw_input(u"是否只获取楼主发言，是输入1，否输入0\n")
    floorTag = raw_input(u"是否写入楼层信息，是输入1，否输入0\n")
    bdtb = BDTB(baseURL,seeLZ,floorTag)
    bdtb.start()
    ##    f=open(filename,'w')
    ##    f.write(tb_test.result)
    ##    f.close
    print 'Finish!'
if __name__ == '__main__':
    main()
